// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tH77ekFNugan8Yv3d3xJez
// Component: 8a55O6uuZe
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_plume_main.module.css"; // plasmic-import: tH77ekFNugan8Yv3d3xJez/projectcss
import * as sty from "./PlasmicMenu__Item.module.css"; // plasmic-import: 8a55O6uuZe/css

import SUPER__PlasmicMenu from "./PlasmicMenu"; // plasmic-import: Xaa7JeNCa3/render

export type PlasmicMenu__Item__VariantMembers = {
  isHighlighted: "isHighlighted";
  isDisabled: "isDisabled";
};

export type PlasmicMenu__Item__VariantsArgs = {
  isHighlighted?: SingleBooleanChoiceArg<"isHighlighted">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
};

type VariantPropType = keyof PlasmicMenu__Item__VariantsArgs;
export const PlasmicMenu__Item__VariantProps = new Array<VariantPropType>(
  "isHighlighted",
  "isDisabled"
);

export type PlasmicMenu__Item__ArgsType = {
  children?: React.ReactNode;
  value?: string;
};

type ArgPropType = keyof PlasmicMenu__Item__ArgsType;
export const PlasmicMenu__Item__ArgProps = new Array<ArgPropType>(
  "children",
  "value"
);

export type PlasmicMenu__Item__OverridesType = {
  root?: p.Flex<"li">;
  labelContainer?: p.Flex<"div">;
};

export interface DefaultMenu__ItemProps extends p.BaseMenuItemProps {}

function PlasmicMenu__Item__RenderFunc(props: {
  variants: PlasmicMenu__Item__VariantsArgs;
  args: PlasmicMenu__Item__ArgsType;
  overrides: PlasmicMenu__Item__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const superContexts = {
    Menu: React.useContext(SUPER__PlasmicMenu.Context),
  };

  return (
    <li
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.li, projectcss.root_reset, sty.root, {
        [sty.root__isHighlighted]: hasVariant(
          variants,
          "isHighlighted",
          "isHighlighted"
        ),
      })}
    >
      <div
        data-plasmic-name={"labelContainer"}
        data-plasmic-override={overrides.labelContainer}
        className={classNames(defaultcss.all, sty.labelContainer)}
      >
        {p.renderPlasmicSlot({
          defaultContents: "Action",
          value: args.children,
          className: classNames(sty.slotChildren),
        })}
      </div>
    </li>
  ) as React.ReactElement | null;
}

function useBehavior<P extends p.BaseSelectOptionProps>(props: P) {
  return p.useMenuItem(PlasmicMenu__Item, props, {
    isDisabledVariant: { group: "isDisabled", variant: "isDisabled" },
    isHighlightedVariant: { group: "isHighlighted", variant: "isHighlighted" },
    labelSlot: "children",
    root: "root",
    labelContainer: "labelContainer",
  });
}

const PlasmicDescendants = {
  root: ["root", "labelContainer"],
  labelContainer: ["labelContainer"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "li";
  labelContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMenu__Item__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicMenu__Item__VariantsArgs;
  args?: PlasmicMenu__Item__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicMenu__Item__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicMenu__Item__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMenu__Item__ArgProps,
      internalVariantPropNames: PlasmicMenu__Item__VariantProps,
    });

    return PlasmicMenu__Item__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMenu__Item";
  } else {
    func.displayName = `PlasmicMenu__Item.${nodeName}`;
  }
  return func;
}

export const PlasmicMenu__Item = Object.assign(
  // Top-level PlasmicMenu__Item renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    labelContainer: makeNodeComponent("labelContainer"),

    // Metadata about props expected for PlasmicMenu__Item
    internalVariantProps: PlasmicMenu__Item__VariantProps,
    internalArgProps: PlasmicMenu__Item__ArgProps,

    useBehavior,
  }
);

export default PlasmicMenu__Item;
/* prettier-ignore-end */
