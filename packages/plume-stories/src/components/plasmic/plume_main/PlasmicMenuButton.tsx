// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tH77ekFNugan8Yv3d3xJez
// Component: T29pXYoQRF
import * as React from "react";

import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants,
} from "@plasmicapp/react-web";
import Menu from "../../menu/Menu"; // plasmic-import: Xaa7JeNCa3/component
import Menu__Item from "../../menu/Menu__Item"; // plasmic-import: 8a55O6uuZe/component

import "@plasmicapp/react-web/lib/plasmic.css";
import * as defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import * as projectcss from "./plasmic_plume_main.module.css"; // plasmic-import: tH77ekFNugan8Yv3d3xJez/projectcss
import * as sty from "./PlasmicMenuButton.module.css"; // plasmic-import: T29pXYoQRF/css

import ChevronDownIcon from "./icons/PlasmicIcon__ChevronDown"; // plasmic-import: VfjbLxU-bA/icon
import ChevronUpIcon from "./icons/PlasmicIcon__ChevronUp"; // plasmic-import: _2iYp9TARO/icon

export type PlasmicMenuButton__VariantMembers = {
  isOpen: "isOpen";
  isDisabled: "isDisabled";
};

export type PlasmicMenuButton__VariantsArgs = {
  isOpen?: SingleBooleanChoiceArg<"isOpen">;
  isDisabled?: SingleBooleanChoiceArg<"isDisabled">;
};

type VariantPropType = keyof PlasmicMenuButton__VariantsArgs;
export const PlasmicMenuButton__VariantProps = new Array<VariantPropType>(
  "isOpen",
  "isDisabled"
);

export type PlasmicMenuButton__ArgsType = {
  children?: React.ReactNode;
  menu?: React.ReactNode;
};

type ArgPropType = keyof PlasmicMenuButton__ArgsType;
export const PlasmicMenuButton__ArgProps = new Array<ArgPropType>(
  "children",
  "menu"
);

export type PlasmicMenuButton__OverridesType = {
  root?: p.Flex<"div">;
  trigger?: p.Flex<"button">;
  contentContainer?: p.Flex<"div">;
  svg?: p.Flex<"svg">;
};

export interface DefaultMenuButtonProps extends p.BaseMenuButtonProps {
  children?: React.ReactNode;
}

function PlasmicMenuButton__RenderFunc(props: {
  variants: PlasmicMenuButton__VariantsArgs;
  args: PlasmicMenuButton__ArgsType;
  overrides: PlasmicMenuButton__OverridesType;
  forNode?: string;
}) {
  const { variants, args, overrides, forNode } = props;

  const [
    isRootFocusVisibleWithin,
    triggerRootFocusVisibleWithinProps,
  ] = useTrigger("useFocusVisibleWithin", {
    isTextInput: false,
  });

  const triggers = {
    focusVisibleWithin_root: isRootFocusVisibleWithin,
  };

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
      data-plasmic-trigger-props={[triggerRootFocusVisibleWithinProps]}
    >
      <p.Stack
        as={"button"}
        data-plasmic-name={"trigger"}
        data-plasmic-override={overrides.trigger}
        hasGap={true}
        className={classNames(defaultcss.button, sty.trigger, {
          [sty.trigger_____focusVisibleWithin]:
            triggers.focusVisibleWithin_root,
          [sty.trigger__isDisabled]: hasVariant(
            variants,
            "isDisabled",
            "isDisabled"
          ),
          [sty.trigger__isOpen]: hasVariant(variants, "isOpen", "isOpen"),
        })}
        disabled={
          hasVariant(variants, "isDisabled", "isDisabled") ? true : undefined
        }
      >
        <div
          data-plasmic-name={"contentContainer"}
          data-plasmic-override={overrides.contentContainer}
          className={classNames(defaultcss.all, sty.contentContainer)}
        >
          {p.renderPlasmicSlot({
            defaultContents: "Menu",
            value: args.children,
            className: classNames(sty.slotChildren),
          })}
        </div>

        <p.PlasmicIcon
          data-plasmic-name={"svg"}
          data-plasmic-override={overrides.svg}
          PlasmicIconType={
            hasVariant(variants, "isOpen", "isOpen")
              ? ChevronUpIcon
              : ChevronDownIcon
          }
          className={classNames(defaultcss.all, sty.svg, {
            [sty.svg__isOpen]: hasVariant(variants, "isOpen", "isOpen"),
          })}
          role={"img"}
        />
      </p.Stack>

      {(hasVariant(variants, "isOpen", "isOpen") ? true : false)
        ? p.renderPlasmicSlot({
            defaultContents: (
              <Menu
                className={classNames("__wab_instance", sty.menu___61ZXh)}
              />
            ),

            value: args.menu,
          })
        : null}
    </div>
  ) as React.ReactElement | null;
}

function useBehavior<P extends p.BaseMenuButtonProps>(
  props: P,
  ref: p.MenuButtonRef
) {
  return p.useMenuButton(
    PlasmicMenuButton,
    props,
    {
      isOpenVariant: { group: "isOpen", variant: "isOpen" },
      isDisabledVariant: { group: "isDisabled", variant: "isDisabled" },
      menuSlot: "menu",
      root: "root",
      trigger: "trigger",
    },

    ref
  );
}

const PlasmicDescendants = {
  root: ["root", "trigger", "contentContainer", "svg"],
  trigger: ["trigger", "contentContainer", "svg"],
  contentContainer: ["contentContainer"],
  svg: ["svg"],
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<
  T extends NodeNameType
> = typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  trigger: "button";
  contentContainer: "div";
  svg: "svg";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicMenuButton__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> = {
  // Explicitly specify variants, args, and overrides as objects
  variants?: PlasmicMenuButton__VariantsArgs;
  args?: PlasmicMenuButton__ArgsType;
  overrides?: NodeOverridesType<T>;
} & Omit<PlasmicMenuButton__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
  // Specify args directly as props
  Omit<PlasmicMenuButton__ArgsType, ReservedPropsType> &
  // Specify overrides for each element directly as props
  Omit<
    NodeOverridesType<T>,
    ReservedPropsType | VariantPropType | ArgPropType
  > &
  // Specify props for the root element
  Omit<
    Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
    ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
  >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicMenuButton__ArgProps,
      internalVariantPropNames: PlasmicMenuButton__VariantProps,
    });

    return PlasmicMenuButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName,
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicMenuButton";
  } else {
    func.displayName = `PlasmicMenuButton.${nodeName}`;
  }
  return func;
}

export const PlasmicMenuButton = Object.assign(
  // Top-level PlasmicMenuButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    trigger: makeNodeComponent("trigger"),
    contentContainer: makeNodeComponent("contentContainer"),
    svg: makeNodeComponent("svg"),

    // Metadata about props expected for PlasmicMenuButton
    internalVariantProps: PlasmicMenuButton__VariantProps,
    internalArgProps: PlasmicMenuButton__ArgProps,

    useBehavior,
  }
);

export default PlasmicMenuButton;
/* prettier-ignore-end */
